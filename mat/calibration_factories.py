EMPTY_CHAR = bytes([255]).decode('IBM437')


def make_from_calibration_file(file_path):
    """
    Create a calibration object based on a calibration file generated by the
    Lowell Instruments calibration software.
    """
    with open(file_path, 'r') as fid:
        coefficients = {}
        for line in fid:
            line = line.strip()
            line = _remove_comments(line)
            if not line:
                continue
            tag, value = _split_tag_value(line)
            coefficients[tag] = value

    if 'RVN' not in coefficients.keys():
        coefficients['RVN'] = '2'
    class_ = {'2': V2Calibration, '3': V3Calibration}.get(coefficients['RVN'])
    return class_(coefficients)


def _remove_comments(line):
    if line.startswith('//'):
        return ''
    inline_comment_ind = line.find('//', 9)
    if inline_comment_ind > 0:
        return line[:inline_comment_ind].strip()
    return line


def _split_tag_value(line):
    tag_value = line.split(' ')
    if len(tag_value) != 2:
        raise ValueError('Structure error in host storage file.')
    return tag_value[0], tag_value[1]


def make_from_string(calibration_string):
    """
    Factory function to return correct calibration subclass based on a string
    """
    if _check_if_empty(calibration_string):
        return V2Calibration({})
    _validate_string(calibration_string)
    if calibration_string.startswith('HSSRVN13'):
        return V3Calibration.load_from_string(calibration_string)
    else:
        return V2Calibration.load_from_string(calibration_string)


def _check_if_empty(calibration_string):
    if all([char == EMPTY_CHAR for char in calibration_string]):
        return True
    return False


def _validate_string(calibration_string):
    if not calibration_string.startswith('HSS'):
        raise ValueError('Host storage string must begin with HSS')
    if calibration_string.find('HSE') == -1:
        raise ValueError('Host storage string must contain HSE tag')


def make_from_datafile(file_obj):
    """
    Create a calibration object from a data file (.lid/.lis)
    file_obj is an open .lid/.lis file in binary mode
    """
    _check_binary_mode(file_obj)
    saved_file_pos = file_obj.tell()
    file_obj.seek(0)
    full_header = file_obj.read(1000).decode('IBM437')
    file_obj.seek(saved_file_pos)
    calibration_string = _extract_calibration_string(full_header)
    return make_from_string(calibration_string)


def _check_binary_mode(file_obj):
    if file_obj.mode != 'rb':
        raise ValueError('File is not open for binary reading')


def _extract_calibration_string(full_header):
    calibration_start = full_header.find('HDE\r\n')
    if calibration_start == -1:
        raise ValueError('HDE tag missing from header')
    return full_header[calibration_start+5:calibration_start+385]


def _trim_start(string, n_chars_to_trim):
    return string[n_chars_to_trim:]
